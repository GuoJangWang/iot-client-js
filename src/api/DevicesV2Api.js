/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArduinoDevicev2 from '../model/ArduinoDevicev2';
import ArduinoDevicev2properties from '../model/ArduinoDevicev2properties';
import ArduinoDevicev2propertyvalues from '../model/ArduinoDevicev2propertyvalues';
import CreateDevicesV2Payload from '../model/CreateDevicesV2Payload';
import Devicev2 from '../model/Devicev2';
import Error from '../model/Error';
import PropertiesValues from '../model/PropertiesValues';

/**
* DevicesV2 service.
* @module api/DevicesV2Api
* @version 0.0.1
*/
export default class DevicesV2Api {

    /**
    * Constructs a new DevicesV2Api. 
    * @alias module:api/DevicesV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the devicesV2Create operation.
     * @callback module:api/DevicesV2Api~devicesV2CreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoDevicev2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create devices_v2
     * Creates a new device associated to the user.
     * @param {module:model/CreateDevicesV2Payload} createDevicesV2Payload DeviceV2 describes a device.
     * @param {module:api/DevicesV2Api~devicesV2CreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoDevicev2}
     */
    devicesV2Create(createDevicesV2Payload, callback) {
      let postBody = createDevicesV2Payload;
      // verify the required parameter 'createDevicesV2Payload' is set
      if (createDevicesV2Payload === undefined || createDevicesV2Payload === null) {
        throw new Error("Missing the required parameter 'createDevicesV2Payload' when calling devicesV2Create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoDevicev2;
      return this.apiClient.callApi(
        '/v2/devices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2Delete operation.
     * @callback module:api/DevicesV2Api~devicesV2DeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete devices_v2
     * Removes a device associated to the user
     * @param {String} id The id of the device
     * @param {module:api/DevicesV2Api~devicesV2DeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesV2Delete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesV2Delete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/devices/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2GetProperties operation.
     * @callback module:api/DevicesV2Api~devicesV2GetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoDevicev2properties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getProperties devices_v2
     * GET device properties
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {module:api/DevicesV2Api~devicesV2GetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoDevicev2properties}
     */
    devicesV2GetProperties(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesV2GetProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.devicev2properties+json'];
      let returnType = ArduinoDevicev2properties;
      return this.apiClient.callApi(
        '/v2/devices/{id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2List operation.
     * @callback module:api/DevicesV2Api~devicesV2ListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArduinoDevicev2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list devices_v2
     * Returns the list of devices associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the devices (default to false)
     * @param {module:api/DevicesV2Api~devicesV2ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArduinoDevicev2>}
     */
    devicesV2List(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'across_user_ids': opts['acrossUserIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.devicev2+json; type=collection'];
      let returnType = [ArduinoDevicev2];
      return this.apiClient.callApi(
        '/v2/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2Show operation.
     * @callback module:api/DevicesV2Api~devicesV2ShowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoDevicev2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * show devices_v2
     * Returns the device requested by the user
     * @param {String} id The id of the device
     * @param {module:api/DevicesV2Api~devicesV2ShowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoDevicev2}
     */
    devicesV2Show(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesV2Show");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.devicev2+json'];
      let returnType = ArduinoDevicev2;
      return this.apiClient.callApi(
        '/v2/devices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2Timeseries operation.
     * @callback module:api/DevicesV2Api~devicesV2TimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoDevicev2propertyvalues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * timeseries devices_v2
     * GET device properties values in a range of time
     * @param {String} id The id of the device
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of properties to select
     * @param {String} opts.start The time at which to start selecting properties
     * @param {module:api/DevicesV2Api~devicesV2TimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoDevicev2propertyvalues}
     */
    devicesV2Timeseries(id, pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesV2Timeseries");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling devicesV2Timeseries");
      }

      let pathParams = {
        'id': id,
        'pid': pid
      };
      let queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.devicev2propertyvalues+json'];
      let returnType = ArduinoDevicev2propertyvalues;
      return this.apiClient.callApi(
        '/v2/devices/{id}/properties/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2Update operation.
     * @callback module:api/DevicesV2Api~devicesV2UpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoDevicev2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update devices_v2
     * Updates a device associated to the user
     * @param {String} id The id of the device
     * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
     * @param {module:api/DevicesV2Api~devicesV2UpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoDevicev2}
     */
    devicesV2Update(id, devicev2, callback) {
      let postBody = devicev2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesV2Update");
      }
      // verify the required parameter 'devicev2' is set
      if (devicev2 === undefined || devicev2 === null) {
        throw new Error("Missing the required parameter 'devicev2' when calling devicesV2Update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoDevicev2;
      return this.apiClient.callApi(
        '/v2/devices/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesV2UpdateProperties operation.
     * @callback module:api/DevicesV2Api~devicesV2UpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateProperties devices_v2
     * Update device properties last values
     * @param {String} id The id of the device
     * @param {module:model/PropertiesValues} propertiesValues 
     * @param {module:api/DevicesV2Api~devicesV2UpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesV2UpdateProperties(id, propertiesValues, callback) {
      let postBody = propertiesValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesV2UpdateProperties");
      }
      // verify the required parameter 'propertiesValues' is set
      if (propertiesValues === undefined || propertiesValues === null) {
        throw new Error("Missing the required parameter 'propertiesValues' when calling devicesV2UpdateProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/devices/{id}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
