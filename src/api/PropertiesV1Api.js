/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArduinoProperty from '../model/ArduinoProperty';
import Error from '../model/Error';
import Property from '../model/Property';
import PropertyValue from '../model/PropertyValue';

/**
* PropertiesV1 service.
* @module api/PropertiesV1Api
* @version 0.0.1
*/
export default class PropertiesV1Api {

    /**
    * Constructs a new PropertiesV1Api. 
    * @alias module:api/PropertiesV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the propertiesV1Create operation.
     * @callback module:api/PropertiesV1Api~propertiesV1CreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create properties_v1
     * Creates a new property associated to a thing
     * @param {String} id The id of the thing
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @param {module:api/PropertiesV1Api~propertiesV1CreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoProperty}
     */
    propertiesV1Create(id, property, callback) {
      let postBody = property;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertiesV1Create");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling propertiesV1Create");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoProperty;
      return this.apiClient.callApi(
        '/v1/things/{id}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertiesV1Delete operation.
     * @callback module:api/PropertiesV1Api~propertiesV1DeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete properties_v1
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @param {module:api/PropertiesV1Api~propertiesV1DeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    propertiesV1Delete(id, pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertiesV1Delete");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling propertiesV1Delete");
      }

      let pathParams = {
        'id': id,
        'pid': pid
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.goa.error+json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/things/{id}/properties/{pid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertiesV1List operation.
     * @callback module:api/PropertiesV1Api~propertiesV1ListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArduinoProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list properties_v1
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {module:api/PropertiesV1Api~propertiesV1ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArduinoProperty>}
     */
    propertiesV1List(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertiesV1List");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.property+json; type=collection', 'application/vnd.goa.error+json'];
      let returnType = [ArduinoProperty];
      return this.apiClient.callApi(
        '/v1/things/{id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertiesV1Publish operation.
     * @callback module:api/PropertiesV1Api~propertiesV1PublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * publish properties_v1
     * Publish a property value to MQTT
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
     * @param {module:api/PropertiesV1Api~propertiesV1PublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    propertiesV1Publish(id, pid, propertyValue, callback) {
      let postBody = propertyValue;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertiesV1Publish");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling propertiesV1Publish");
      }
      // verify the required parameter 'propertyValue' is set
      if (propertyValue === undefined || propertyValue === null) {
        throw new Error("Missing the required parameter 'propertyValue' when calling propertiesV1Publish");
      }

      let pathParams = {
        'id': id,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.goa.error+json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/things/{id}/properties/{pid}/publish', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertiesV1Show operation.
     * @callback module:api/PropertiesV1Api~propertiesV1ShowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * show properties_v1
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {module:api/PropertiesV1Api~propertiesV1ShowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoProperty}
     */
    propertiesV1Show(id, pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertiesV1Show");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling propertiesV1Show");
      }

      let pathParams = {
        'id': id,
        'pid': pid
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoProperty;
      return this.apiClient.callApi(
        '/v1/things/{id}/properties/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertiesV1Update operation.
     * @callback module:api/PropertiesV1Api~propertiesV1UpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArduinoProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update properties_v1
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @param {module:api/PropertiesV1Api~propertiesV1UpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArduinoProperty}
     */
    propertiesV1Update(id, pid, property, callback) {
      let postBody = property;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertiesV1Update");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling propertiesV1Update");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling propertiesV1Update");
      }

      let pathParams = {
        'id': id,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoProperty;
      return this.apiClient.callApi(
        '/v1/things/{id}/properties/{pid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
