/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IotApi);
  }
}(this, function(expect, IotApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IotApi.PropertiesV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PropertiesV1Api', function() {
    describe('propertiesV1Create', function() {
      it('should call propertiesV1Create successfully', function(done) {
        //uncomment below and update the code to test propertiesV1Create
        //instance.propertiesV1Create(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('propertiesV1Delete', function() {
      it('should call propertiesV1Delete successfully', function(done) {
        //uncomment below and update the code to test propertiesV1Delete
        //instance.propertiesV1Delete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('propertiesV1List', function() {
      it('should call propertiesV1List successfully', function(done) {
        //uncomment below and update the code to test propertiesV1List
        //instance.propertiesV1List(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('propertiesV1Publish', function() {
      it('should call propertiesV1Publish successfully', function(done) {
        //uncomment below and update the code to test propertiesV1Publish
        //instance.propertiesV1Publish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('propertiesV1Show', function() {
      it('should call propertiesV1Show successfully', function(done) {
        //uncomment below and update the code to test propertiesV1Show
        //instance.propertiesV1Show(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('propertiesV1Update', function() {
      it('should call propertiesV1Update successfully', function(done) {
        //uncomment below and update the code to test propertiesV1Update
        //instance.propertiesV1Update(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
